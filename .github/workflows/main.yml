name: Build, Test, Deploy to ECS

on:
  push:
    branches:
      - main
      - feature/pipeline
  pull_request:
    types: [closed]
    branches:
      - main
      - 'release/*'          
      - 'releasecandidate/*'

jobs:
  build_and_deploy:
    if: github.event.pull_request.merged == true
    runs-on: ubuntu-latest  

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up .NET SDK
        uses: actions/setup-dotnet@v2
        with:
          dotnet-version: '8.0.x'
          
      - name: SonarCloud Scan
        uses: SonarSource/sonarcloud-github-action@v2
        with:
          args: >
            -Dsonar.projectKey=poliedrocloud_Poliedro.Billing
            -Dsonar.organization=poliedrocloud
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          
     
      - name: Restore dependencies
        run: dotnet restore

      - name: Build the project
        run: dotnet build --configuration Release

      - name: Run unit tests
        run: dotnet test --configuration Release --no-build
        
      - name: Install JMeter
        run: |
          sudo apt-get update
          sudo apt-get install -y openjdk-17-jre-headless
          wget https://archive.apache.org/dist/jmeter/binaries/apache-jmeter-5.6.3.tgz
          tar -xzf apache-jmeter-5.6.3.tgz
          export JMETER_HOME=$PWD/apache-jmeter-5.6.3
          echo "$JMETER_HOME/bin" >> $GITHUB_PATH
      - name: Run JMeter Load Test
        run: |
          ./apache-jmeter-5.6.3/bin/jmeter -n -t LoadTest/EDS.jmx -l LoadTest/results.jtl -e -o LoadTest/report
          
      - name: Upload JMeter HTML Reports
        uses: actions/upload-artifact@v4
        with:
          name: jmeter-reports
          path: LoadTest/*_report
          
      - name: Set AWS region
        run: |
          aws configure set region ${{ secrets.AWS_REGION }}  # Usar la región configurada en Secrets
          
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Log in to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build Docker image
        run: |
          docker build -t ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/${{ secrets.ECR_BILLING_REPOSITORY }}:latest .
      - name: Tag Docker image
        run: |
          docker tag ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/${{ secrets.ECR_BILLING_REPOSITORY }}:latest ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/${{ secrets.ECR_BILLING_REPOSITORY }}:latest
      - name: Push Docker image to ECR
        run: |
          docker push ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/${{ secrets.ECR_BILLING_REPOSITORY }}:latest
      - name: Deploy to Amazon ECS
        run: |
          # Usar el ARN de la task definition desde Secrets
          ecs_task_definition_arn="${{ secrets.TASK_DEFINITION_ARN_BILLING }}"
          echo "Usando el ARN de la task definition: $ecs_task_definition_arn"
          
          # Forzar la actualización del servicio con la task definition existente
          ecs_deploy=$(aws ecs update-service \
            --cluster ${{ secrets.AWS_ECS_CLUSTER }} \
            --service ${{ secrets.AWS_ECS_BILLING_SERVICE }} \
            --task-definition $ecs_task_definition_arn \
            --force-new-deployment)
          
          echo "Resultado del despliegue en ECS: $ecs_deploy"
      - name: Check ECS Service Status
        run: |
          # Verifica el estado del servicio
          service_status=$(aws ecs describe-services \
            --cluster ${{ secrets.AWS_ECS_CLUSTER }} \
            --services ${{ secrets.AWS_ECS_BILLING_SERVICE }} \
            --query 'services[0].status' --output text)
          
          echo "Estado del servicio: $service_status"
      - name: Check ECS Task Definition
        run: |
          # Verifica la imagen de la task definition
          task_definition_image=$(aws ecs describe-task-definition \
            --task-definition ${{ secrets.TASK_DEFINITION_ARN_BILLING }} \
            --query 'taskDefinition.containerDefinitions[0].image' --output text)
          
          echo "Imagen de la task definition: $task_definition_image"
